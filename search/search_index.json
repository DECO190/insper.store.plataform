{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":""},{"location":"#about-this-project","title":"About this project","text":"<ul> <li>This project is a Spring Boot application that serves as a REST API for managing a store inventory.</li> <li>It provides endpoints to perform CRUD operations on products, categories, and suppliers.</li> <li>The architecture follows the microservices pattern, allowing for scalability and maintainability.</li> </ul> <p>YouTube Video - Individual YouTube Video - Grupo aws</p>"},{"location":"repositories/","title":"Repositories","text":"<ul> <li> <p>Product Service: Manages product-related operations.</p> <ul> <li>Product</li> <li>Product Service</li> </ul> </li> <li> <p>Order Service: Handles order-related operations.</p> <ul> <li>Order</li> <li>Order Service</li> </ul> </li> <li> <p>Account Service: Manages user accounts.</p> <ul> <li>Account</li> <li>Account Service</li> </ul> </li> <li> <p>Auth Service: Provides authentication and authorization.</p> <ul> <li>Auth</li> <li>Auth Service</li> </ul> </li> <li> <p>Gateway Service: Acts as a gateway for routing requests to the appropriate services.</p> <ul> <li>Gateway</li> <li>Gateway Service</li> </ul> </li> </ul>"},{"location":"exercises/bottlenecks/","title":"Bottlenecks","text":""},{"location":"exercises/bottlenecks/#cache","title":"Cache","text":"<p>I have implemented the cache bottleneck with Spring Cache. The product data is cached to reduce database calls and improve response times.</p>"},{"location":"exercises/exchange-api/","title":"Exchange API","text":"<p>The exchange api is a REST API built with python and FastAPI. It provides endpoints for managing exchange rates and currency conversions. The API is designed to be simple and efficient, allowing users to easily retrieve exchange rates and perform currency conversions.</p>"},{"location":"exercises/exchange-api/#api","title":"API","text":"<ul> <li>[GET] /coin/{from_curr}/{to_curr}</li> <li>Description: Converts currency from one to another.</li> <li>Parameters:<ul> <li>from_curr (str): The currency code to convert from.</li> <li>to_curr (str): The currency code to convert to.</li> </ul> </li> <li>Response:<ul> <li>200 OK: Returns the conversion rate and other details.</li> <li>400 Bad Request: If the currency codes are invalid.</li> </ul> </li> <li>Example:     <pre><code>{\n  \"sell\": \"5.25\",\n  \"buy\": \"5.20\",\n  \"date\": \"2023-10-01T12:00:00Z\",\n  \"id-account\": \"12345\"\n}\n</code></pre></li> </ul>"},{"location":"exercises/jenkins/","title":"Jenkins","text":"<p>The Jenkins is a continuous integration and continuous deployment (CI/CD) tool that automates the process of building, testing, and deploying applications. It is widely used in software development to ensure that code changes are integrated smoothly and deployed efficiently.</p>"},{"location":"exercises/jenkins/#jenkins-cicd-pipeline","title":"Jenkins CI/CD Pipeline","text":"<p>The Jenkins CI/CD pipeline for this project automates the build, test, and deployment processes. It is configured to trigger on code changes, ensuring that the latest version of the application is always tested and deployed.</p> <ul> <li>The pipeline is defined in a <code>Jenkinsfile</code>, which specifies the stages and steps involved in the CI/CD process. Example:</li> </ul> <p>Package's <code>Jenkinsfile</code> in the root directory: <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean install'\n            }\n        }\n    }\n\n}\n</code></pre></p> <p>Service <code>Jenkinsfile</code> in the root directory project: <pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'order-service'\n        NAME = \"deco1903/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                build job: 'order', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(credentialsId: 'dockerhub-credential', usernameVariable: 'USERNAME', passwordVariable: 'TOKEN')]) {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre></p> <ul> <li> <p>After the pipeline is defined, it is pushed to the repository. Jenkins automatically detects the <code>Jenkinsfile</code> and starts the CI/CD process. </p> </li> <li> <p>The pipeline consists of several stages, including building the application, running tests, and deploying the application to the docker hub. </p> </li> </ul>"},{"location":"exercises/minikube/","title":"MiniKube","text":"<p>The Minikube was created to provide a local Kubernetes environment for testing and development purposes. It allows developers to run Kubernetes clusters on their local machines, making it easier to test applications in a Kubernetes environment without needing a full cloud setup.</p> <p>Each service used the following k8s.yaml file to deploy the service in Minikube after the build and push to the Docker Hub.: <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: order\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: order\n  template:\n    metadata:\n      labels:\n        app: order\n    spec:\n      containers:\n        - name: order\n          image: deco1903/order-service:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n          env:\n            - name: DATABASE_HOST\n              valueFrom:\n                configMapKeyRef:\n                  name: postgres-configmap\n                  key: POSTGRES_HOST\n\n            - name: DATABASE_USER\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_USER\n\n            - name: DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_PASSWORD\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: order\n  labels:\n    app: order\nspec:\n  type: ClusterIP\n  ports:\n    - port: 8080\n  selector:\n    app: order\n</code></pre></p> <p>For the gateway service, the k8s.yaml file is slightly different: <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: gateway\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: gateway\n  template:\n    metadata:\n      labels:\n        app: gateway\n    spec:\n      containers:\n        - name: db\n          image: deco1903/gateway-service:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n          resources:\n            requests:\n              memory: \"200Mi\"\n              cpu: \"50m\"\n            limits:\n              memory: \"300Mi\"\n              cpu: \"200m\"\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: gateway\n  labels:\n    app: gateway\nspec:\n  type: LoadBalancer\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8080\n\n  selector:\n    app: gateway\n</code></pre></p> <ul> <li> <p>After applying the k8s.yaml files: </p> </li> <li> <p>And to connect with the Minikube cluster, you can use the following command to port-forward the gateway service to your local machine: <pre><code>kubectl port-forward svc/gateway 8080:80\n</code></pre></p> </li> </ul>"},{"location":"exercises/order-api/","title":"Order API","text":"<p>The order API is a RESTful service that allows users to manage their orders in a store. It provides endpoints for creating, retrieving, and managing orders. The API is designed to be simple and efficient, allowing users to easily interact with their orders.</p>"},{"location":"exercises/order-api/#api","title":"API","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway --&gt; exchange\n        gateway e5@==&gt; product\n        gateway e6@==&gt; order:::red\n        product e2@==&gt; db\n        order e3@==&gt; db\n        order e4@==&gt; product\n    end\n    exchange --&gt; 3partyapi@{label: \"3rd-party API\"}\n    internet e1@==&gt;|request| gateway\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n    classDef red fill:#fcc\n    click order \"#order-api\" \"Order API\"</code></pre> <p>Attention</p> <p>To consume the API, the user must be authenticated.</p>"},{"location":"exercises/order-api/#order-api","title":"Order API","text":"<p>POST /order</p> <p>Create a new order for the current user.</p> RequestResponse <pre><code>{\n    \"items\": [\n        {\n            \"idProduct\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n            \"quantity\": 2\n        },\n        {\n            \"idProduct\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n            \"quantity\": 1\n        }\n    ]\n}\n</code></pre> <p><pre><code>{\n    \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n    \"date\": \"2025-09-01T12:30:00\",\n    \"items\": [\n        {\n            \"id\": \"01961b9a-bca2-78c4-9be1-7092b261f217\",\n            \"product\": {\n                \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\"\n            },\n            \"quantity\": 2,\n            \"total\": 20.24\n        },\n        {\n            \"id\": \"01961b9b-08fd-76a5-8508-cdb6cd5c27ab\",\n            \"product\": {\n                \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\"\n            },\n            \"quantity\": 10,\n            \"total\": 6.2\n        }\n    ],\n    \"total\": 26.44\n}\n</code></pre> <pre><code>Response code: 201 (created)\nResponse code: 400 (bad request), if the product does not exist.\n</code></pre></p> <p>GET /order</p> <p>Get all orders for the current user.</p> Response <p><pre><code>[\n    {\n        \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n        \"date\": \"2025-09-01T12:30:00\",\n        \"total\": 26.44\n    },\n    {\n        \"id\": \"0195ac33-cbbd-7a6e-a15b-b85402cf143f\",\n        \"date\": \"2025-10-09T03:21:57\",\n        \"total\": 18.6\n    }\n\n]\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p>GET /order/{id}</p> <p>Get the order details by its ID. The order must belong to the current user., otherwise, return a <code>404</code>.</p> Response <p><pre><code>{\n    \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n    \"date\": \"2025-09-01T12:30:00\",\n    \"items\": [\n        {\n            \"id\": \"01961b9a-bca2-78c4-9be1-7092b261f217\",\n            \"product\": {\n                \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n            },\n            \"quantity\": 2,\n            \"total\": 20.24\n        },\n        {\n            \"id\": \"01961b9b-08fd-76a5-8508-cdb6cd5c27ab\",\n            \"product\": {\n                \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n            },\n            \"quantity\": 10,\n            \"total\": 6.2\n        }\n    ],\n    \"total\": 26.44\n}\n</code></pre> <pre><code>Response code: 200 (ok)\nResponse code: 404 (not found), if the order does not belong to the current user.\n</code></pre></p>"},{"location":"exercises/product-api/","title":"Product API","text":"<p>The product API is a REST API built with Spring Boot. It provides endpoints for managing products in a store inventory. The API allows users to create, retrieve, and delete products.</p>"},{"location":"exercises/product-api/#api","title":"API","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway --&gt; exchange\n        gateway e5@==&gt; product:::red\n        gateway e6@==&gt; order\n        product e2@==&gt; db\n        order e3@==&gt; db\n        order e4@==&gt; product\n    end\n    exchange --&gt; 3partyapi@{label: \"3rd-party API\"}\n    internet e1@==&gt;|request| gateway\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n    classDef red fill:#fcc\n    click product \"#product-api\" \"Product API\"</code></pre> <p>Attention</p> <p>To consume the API, the user must be authenticated.</p>"},{"location":"exercises/product-api/#product-api","title":"Product API","text":"<p>The API should have the following endpoints:</p> <p>POST /product</p> <p>Create a new product.</p> RequestResponse <pre><code>{\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <p><pre><code>{\n    \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <pre><code>Response code: 201 (created)\n</code></pre></p> <p>GET /product</p> <p>Get all products.</p> Response <p><pre><code>[\n    {\n        \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n        \"name\": \"Tomato\",\n        \"price\": 10.12,\n        \"unit\": \"kg\"\n    },\n    {\n        \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n        \"name\": \"Cheese\",\n        \"price\": 0.62,\n        \"unit\": \"slice\"\n    }\n]\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p>GET /product/{id}</p> <p>Get a product by its ID.</p> Response <p><pre><code>{\n    \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p>DELETE /product/{id}</p> <p>Delete a product by its ID.</p> <pre><code>Response code: 204 (no content)\n</code></pre>"}]}